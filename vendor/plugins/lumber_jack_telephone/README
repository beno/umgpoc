LumberJack::Telephone

This plugin is a part of the LumberJack Project -- a library of reusable business objects for Rails Applications. Please read 'about_lumber_jack' for more background on the LumberJack Project.

This plugin installs a polymorphic Telephone model into your application. After it is installed, you will be able to associate multiple Telephones with any model in your application. You will also have a polymorphic TelephonesController and views to re-use on all of your associated models. Telephone uses the 'has_many' associations included in Rails plus 'acts_as_list' to maintain Telephones as a sortable list.

Example Usage: 

In addition to associating several Telephones with your Model, you will also gain some helper methods to manage Model and associated Telephones. Here is a brief example:

  person.rb:
  ---------
  class Person < ActiveRecord::Base
    has_many_telephones
  end

Your Person model now has the usual Rails 'has_many' functionality plus some additional 
methods:

  Person.find_all_by_telephone('number') => array of Person models for that 'number'.
  p = Person.find(1)
  p.telephone_for('purpose') => The Telephone object for that 'purpose'.
  p.telephone_for_purpose => The same thing called differently
  p.telephone_for('purpose').display_string => '(123) 456-7890' A formatted string.
  p.telephone_for_purpose.display_string => '(123) 456-7890' A formatted string.
  p.telephone_best => The telephone object that you have sorted to the top of the telephones list.

  routes.rb (modify the standard route for :people):
  ---------
  map.resources :people, :has_many => :telephones

Your PersonController now has access to the polymorphic TelephonesController and the views required to manage Telephones for people. You will notice that we do not allow direct access to the Telephone controller -- All Telephones are accessed through a parent Model and its Controller.

Plugin Installation for a brand new project:

Rails 2.3.2 or higher!

Create a new rails project:
  rails test_telephone
  
Move into your new directory:
  script/generate scaffold Organization name:string
  script/generate scaffold Person name:string
  script/plugin install acts_as_list

Install LumberJack:
  script/plugin install git://github.com/brianlong/lumber_jack_telephone.git
  script/generate lumber_jack_telephone

Add this to 'app/models/organization.rb' & 'app/models/people.rb':
  has_many_telephones #(Put it right after the class definition)

Move 'views/layouts/organizations.html.erb' to 'views/layouts/application.html.erb' (Not sure why Rails does not create this file with every new project)

Delete 'views/layouts/organizations.html.erb' & 'views/layouts/people.html.erb'

Modify 'views/layouts/application.html.erb' to include this in the 'head' section:
  <%= javascript_include_tag :defaults %>

Modify 'config/routes.rb' as follows:
  map.resources :organizations, :has_many => :telephones
  map.resources :people, :has_many => :telephones
  map.root :controller => "organizations"

Delete 'public/index.html'

Add this partial reference to 'app/views/organizations/show.html.erb':
  <%= render :partial => 'telephones/list', :locals => {:telephonic => organization} %>

Add this partial reference to 'app/views/people/show.html.erb':
  <%= render :partial => 'telephones/list', :locals => {:telephonic => person} %>

Then:
  rake db:create
  rake db:migrate
  script/server
Create an Organization and a Person then add some telephone numbers for each.

Use script/console to check out some methods that the plugin adds to your models:
  Model.find_all_by_telephone('number') => array of Models for that 'number'
  m = Model.find(1)
  m.telephone_for('purpose') => The Telephone object for that 'purpose'.
  m.telephone_for_purpose => The same thing called differently
  m.telephone_for('purpose').display_string => '(123) 456-7890' A formatted string.
  m.telephone_for_purpose.display_string => '(123) 456-7890' A formatted string.
  m.telephone_best => The Telephone object that you have sorted to the top of the list.

Copyright (c) 2009 Brian K. Long, released under the MIT license